/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.9).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.switch_api.api;

import io.swagger.switch_api.model.CreateUserRequest;
import io.swagger.switch_api.model.Error;
import io.swagger.switch_api.model.TaskListResponse;
import io.swagger.switch_api.model.TaskResponse;
import java.util.UUID;
import io.swagger.switch_api.model.UserListResponse;
import io.swagger.switch_api.model.UserResponse;
import io.swagger.switch_api.model.UserTaskResponse;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2021-06-09T10:49:04.429+02:00")

@Api(value = "user", description = "the user API")
public interface UserApi {

    @ApiOperation(value = "Create user", nickname = "createUser", notes = "Create new user", response = UserResponse.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "User created successfully", response = UserResponse.class),
        @ApiResponse(code = 400, message = "Bad request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 422, message = "Unprocessable entity. Codes: USER_ALREADY_EXISTS", response = Error.class) })
    @RequestMapping(value = "/user",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<String> createUser(@ApiParam(value = "User object that has to be added" ,required=true )  @Valid @RequestBody CreateUserRequest body,@ApiParam(value = "Podpis X-HMAC-SIGNATURE" ,required=true) @RequestHeader(value="X-HMAC-SIGNATURE", required=true) String X_HMAC_SIGNATURE);


    @ApiOperation(value = "Get user list", nickname = "getAllUsers", notes = "Gets all users data", response = UserListResponse.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = UserListResponse.class),
        @ApiResponse(code = 400, message = "Bad request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 422, message = "Unprocessable entity. Codes: USER_ALREADY_EXISTS", response = Error.class) })
    @RequestMapping(value = "/user",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<UserListResponse> getAllUsers();


    @ApiOperation(value = "Take task", nickname = "takeTask", notes = "Update task data", response = UserTaskResponse.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = UserTaskResponse.class),
        @ApiResponse(code = 400, message = "Bad request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 404, message = "Task not found", response = Error.class),
        @ApiResponse(code = 422, message = "Unprocessable entity.", response = Error.class) })
    @RequestMapping(value = "/user/takeTask",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<String> takeTask(@ApiParam(value = "" ,required=true) @RequestHeader(value="taskId", required=true) UUID taskId,@ApiParam(value = "" ,required=true) @RequestHeader(value="userId", required=true) UUID userId);


    @ApiOperation(value = "Get Task list", nickname = "getAllTasks", notes = "Get lists of all tasks for specific user", response = TaskListResponse.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = TaskListResponse.class),
        @ApiResponse(code = 400, message = "Bad request", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = Error.class),
        @ApiResponse(code = 422, message = "Unprocessable entity. Codes: USER_ALREADY_EXISTS", response = Error.class) })
    @RequestMapping(value = "/user/getAllTasks",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TaskListResponse> getTaskList(@ApiParam(value = "" ,required=true) @RequestHeader(value="userId", required=true) UUID userId);
}
